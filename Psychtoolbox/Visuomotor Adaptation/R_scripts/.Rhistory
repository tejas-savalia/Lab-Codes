ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
a = 'data/pilot/pilot_1/initial_time/initial_time'
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
getcwd()
getwd()
setwd("C:\Users\Tejas\Documents\Research\Lab-Codes\Psychtoolbox\Visuomotor Adaptation\R_scripts")
setwd("C:\\Users\\Tejas\\Documents\\Research\\Lab-Codes\\Psychtoolbox\\Visuomotor Adaptation\\R_scripts")
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
#setwd('C:\\Users\\cemnlcmaplab\\Documents\\Psych 891 Modelling cog dynamics\\Codes\\Midterm')
source('wald.R')
source('TruncNorm.R')
si= 1
cnt = 0
upfreq = 50
a = 'data/pilot/pilot_1/initial_time/initial_time'
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
par(mfrow = c(2, 2))
boxplot(f_a, f_v, f_ter, f_wald_gsq)
boxplot(f_a)
a = 'ab'+'cd'
a = 'ab','cd'
a = paste('ab','cd')
a
a = paste('ab','cd', sep='')
a
upfreq = 50
loops = function(data){
a = paste('data/pilot/pilot_','data','/initial_time/initial_time', sep = '')
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
return(f_a, f_v, f_ter, f_wald_gsq)
}
}
loops = function(data){
a = paste('data/pilot/pilot_','data','/initial_time/initial_time', sep = '')
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
}
fits1 = loops(1)
fits1 = loops(1)
loops = function(data){
a = paste('data/pilot/pilot_',str(data),'/initial_time/initial_time', sep = '')
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
}
fits1 = loops(1)
fits1 = loops(1)
loops = function(data){
data = str(data)
a = paste('data/pilot/pilot_',data,'/initial_time/initial_time', sep = '')
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
}
fits1 = loops(1)
data = 1
data = str(data)
a = paste('data/pilot/pilot_',data,'/initial_time/initial_time', sep = '')
a
loops = function(data){
data = toString(data)
a = paste('data/pilot/pilot_',data,'/initial_time/initial_time', sep = '')
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
}
fits1 = loops(1)
fits1 = loops(1)
fits1 = loops(1)
fits1 = loops(2)
data = 1
data = toString(data)
a = paste('data/pilot/pilot_',data,'/initial_time/initial_time', sep = '')
a
f_a = c()
f_v = c()
f_ter = rep(0, nsim)
f_wald_gsq = rep(Inf, nsim)
si= 1
cnt = 0
upfreq = 50
a = 'data/pilot/pilot_1/initial_time/initial_time'
fits1 = loops(2)
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
ls = list(f_a, f_v, f_ter, f_wald_gsq)
return (ls)
}
si= 1
cnt = 0
upfreq = 50
a = 'data/pilot/pilot_1/initial_time/initial_time'
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
data.frame(f_a, f_v)
data1 = data.frame(f_a, f_v, f_ter, f_gsq)
data1 = data.frame(f_a, f_v, f_ter, f_gsq)
data1 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
data2 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
data3 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
data1 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
a = 'data/pilot/pilot_2/initial_time/initial_time'
cnt = 0
upfreq = 50
a = 'data/pilot/pilot_2/initial_time/initial_time'
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
data2 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
a = 'data/pilot/pilot_3/initial_time/initial_time'
cnt = 0
upfreq = 50
a = 'data/pilot/pilot_3/initial_time/initial_time'
c = '.mat'
for(si in 1:nsim){
#runs the sim function above
#q_wald=waldSimq(a[si], v[si], N)
b = si-1
data = readMat(paste(a, b, c, sep=""))
#for (ter in seq(0, min(data[[1]]) - 0.001, length.out = 100)){
#q_wald = quantile(data[[1]] - ter)
f_wald = f
#Creates a vector of observed frequency
#  counts in each RT bin separated by
#  quantiles from the exgsim function
ls=wald_fit(f_wald)
#return fit parameters and gsq values.
fpar=ls[[1]]
newgval=ls[[2]]
#if (newgval < f_wald_gsq[si]){
f_a[si]=fpar[1]
f_v[si]=fpar[2]
f_wald_gsq[si]=newgval
f_ter[si] = fpar[3]
#print (ter)
#}
#}
#show progress updates
print(cnt)
#print(f_ter)
cnt=cnt+1
}
data3 = data.frame(f_a, f_v, f_ter, f_wald_gsq)
##########################################################################################
#Plots
par(mfrow = c(2, 2))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values")
##########################################################################################
#Plots
par(mfrow = c(2, 2))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values", xlab = c(1, 2, 3))
##########################################################################################
#Plots
par(mfrow = c(2, 2))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values", xlab = '1', '2', '3'))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values", xlab = '1', '2', '3')
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values", xlab = ('1', '2', '3'))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values", xlab = ('1, 2, 3'))
##########################################################################################
#Plots
par(mfrow = c(2, 2))
boxplot(data1$f_a, data2$f_a, data3$f_a, ylab = "Boundary parameter values")
boxplot(data1$f_v, data2$f_v, data3$f_v, ylab = "Drift Rate values")
boxplot(data1$f_ter, data2$f_ter, data3$f_ter, ylab = "Non decision time values")
boxplot(data1$f_wald_gsq, data2$f_wald_gsq, data3$f_wald_gsq, ylab = "G-square errors")
